image: maven:3.8.8-openjdk-17  # Usando uma imagem Maven com JDK 17

stages:
  - build
  - test
  - coverage
  - deploy

# Job para compilar o código
build-job:
  stage: build
  script:
    - echo "Compilando o código com Maven..."
    - mvn clean compile  # Comando Maven para compilar o código
    - echo "Compilação concluída."
  artifacts:
    paths:
      - target/  # Diretório onde os arquivos compilados serão armazenados

# Job para análise estática de código (linter)
lint-test-job:
  stage: test
  script:
    - echo "Executando análise estática de código (linter)..."
    - mvn checkstyle:check  # Executa o plugin Checkstyle para análise de código
  allow_failure: true  # Permite que erros de lint não bloqueiem o pipeline se não forem críticos

# Job para executar testes unitários
unit-test-job:
  stage: test
  script:
    - echo "Executando testes unitários com Maven..."
    - mvn test  # Executa os testes unitários
  artifacts:
    paths:
      - target/surefire-reports/  # Diretório onde os relatórios de testes são armazenados

# Job para gerar e salvar o relatório de cobertura de código
coverage-job:
  stage: coverage
  script:
    - echo "Gerando relatório de cobertura de código com Maven..."
    - mvn clean verify jacoco:report  # Executa o plugin JaCoCo para gerar o relatório de cobertura
  artifacts:
    paths:
      - target/site/jacoco/  # Diretório onde o relatório de cobertura é armazenado

# Job para deploy da aplicação
deploy-job:
  stage: deploy
  environment: production
  script:
    - echo "Realizando deploy da aplicação..."
    - mvn clean package  # Cria o pacote final para deploy (por exemplo, um arquivo JAR)
    - echo "Aplicação empacotada e pronta para deploy."
    # Adicione o comando real de deploy aqui, como upload para um servidor ou execução do JAR
