stages:
  - build
  - test
  - coverage
  - deploy

# Job para compilar/buildar o código
build-job:
  stage: build
  script:
    - echo "Compilando o código..."
    - echo "Compile complete."  # Substitua esta linha pelos comandos reais necessários para compilar o projeto
  artifacts:
    paths:
      - build/  # Armazene os arquivos compilados, se necessário

# Job para análise estática de código com linter
lint-test-job:
  stage: test
  script:
    - echo "Executando análise de lint..."
    - npm run lint  # Substitua pelo comando de linter real usado no projeto (ex.: ESLint para JavaScript)
  allow_failure: true  # Permite que erros de lint não bloqueiem o pipeline se não forem críticos

# Job para executar testes unitários
unit-test-job:
  stage: test
  script:
    - echo "Executando testes unitários..."
    - npm test  # Substitua pelo comando real para rodar os testes unitários
  artifacts:
    paths:
      - test-reports/  # Armazena relatórios de testes para análise futura

# Job para gerar e salvar o relatório de cobertura de código
coverage-job:
  stage: coverage
  script:
    - echo "Gerando relatório de cobertura de código..."
    - npm run coverage  # Substitua pelo comando real para cobertura, como Jest com o flag de cobertura
  artifacts:
    paths:
      - coverage/  # Armazene o diretório de cobertura como um artefato

# Job para deploy da aplicação
deploy-job:
  stage: deploy
  environment: production
  script:
    - echo "Realizando deploy da aplicação..."
    - ./deploy.sh  # Substitua pelo script ou comando real de deploy
    - echo "Aplicação implantada com sucesso."
